@page "/concerts/create"
@using Microsoft.EntityFrameworkCore
@using Concert400.Data
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "manager")]
@inject IDbContextFactory<Concert400.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>


    <h1 class="title">Nouveau concert</h1>
<MudContainer MaxWidth="MaxWidth.Medium">
    <MudButton Color="Color.Dark" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ChevronLeft" Href="concerts">Retour</MudButton>
    <MudPaper Class="px-2 py-5">
        <ImageUpload @bind-Data="Concert.Picture"></ImageUpload>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Titre" @bind-Value="Concert.Name"></MudTextField>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Description" @bind-Value="Concert.Description" Lines="4"></MudTextField>
        <MudTextField Variant="Variant.Outlined" Margin="Margin.Dense" Label="Prix" @bind-Value="Concert.Price" InputType="InputType.Number"></MudTextField>
        <MudDatePicker Variant="Variant.Outlined" PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape" Margin="Margin.Dense" Label="Date" @bind-Date="Concert.Date"></MudDatePicker>
        <MudTimePicker Variant="Variant.Outlined" Margin="Margin.Dense" Label="Heure" @bind-Time="ts"></MudTimePicker>
        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Lieu" T="Place" @bind-Value="Concert.Place">
            @foreach (var place in Places)
            {
                <MudSelectItem Value="place">@place.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Artistes" T="Artist" MultiSelection @bind-SelectedValues="Concert.Artists" ToStringFunc="x => x.Name">
            @foreach (var artist in Artists)
            {
                <MudSelectItem Value="artist">@artist.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton OnClick="AddConcert">Ajouter</MudButton>
    </MudPaper>
</MudContainer>

@code {
    [SupplyParameterFromForm]
    private Concert Concert { get; set; } = new();
    private List<Place> Places = new();
    private List<Artist> Artists = new();
    private ApplicationDbContext context = default!;

    private TimeSpan? ts {
        get
        { 
            return Concert.Date != null ? Concert.Date.Value.TimeOfDay : null; 
        } 
        set
        {
            if(Concert.Date != null && value != null)
            {   
                Concert.Date = new DateTime(DateOnly.FromDateTime(Concert.Date.Value), TimeOnly.FromTimeSpan(value.Value));
            }
        }
    }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Places = context.Places.ToList();
        Artists = context.Artists.ToList();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddConcert()
    {
        //Opération SQL INSERT Générée automatiquement:
        using var context = DbFactory.CreateDbContext();
        context.Attach(Concert);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/concerts");
    }
}
